const convertFromBase64ToImage = require('./convertFromBase64ToImage')

const generateModel = async (ctx, loadingMessageToUser, modelsData) => {
  if (!ctx.message.text.replace(modelsData.name, '').trim()) {
    ctx.reply(
      `–ù—É–∂–µ–Ω —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ ${modelsData.name}, –Ω–µ –æ—Å—Ç–∞–≤–ª—è–π –∑–∞–ø—Ä–æ—Å –ø—É—Å—Ç—ã–º. üòî `
    )
    await ctx.telegram.deleteMessage(
      ctx.chat.id,
      loadingMessageToUser.message_id
    )
    return
  }
  modelsData.modelFn(
    {
      prompt: ctx.message.text.replace(modelsData.name, '').trim(),
      data: modelsData.optionalData,
    },
    async (err, data) => {
      if (err != null) {
        ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ! üòî')
      } else {
        try {
          if (data && data.images) {
            convertFromBase64ToImage(data, ctx, loadingMessageToUser)
          } else {
            ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ! üòî')
          }
        } catch (err) {
          ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ! üòî')
        }
      }
    }
  )
}

module.exports = generateModel
